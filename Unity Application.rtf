{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs32\lang9 Analytics:\par
\b0\fs22 Order of issues/bugs - I would take into account the order they were received, but assuming they were all placed at exactly the same time I would order them as such.\par
\par
\b First\b0 - I would do \ul\i Issue 1\ulnone  \i0 first. It is a very quick response of saying that it takes 12-14 hours for data to populate and that if it hasnt been that long, please wait and contact Unity again if it over that time frame.\par
\b Second- \b0 I would do \ul\i Issue 4\ulnone\i0  second. It is another quick response. From what I am aware, it is not possible to do the min, max, and deviation and I would tell them that and that they would add it to the Feedback board to get installed. \par
\b Third- \b0 I would do \ul\i Issue 3\ulnone\i0  third. I would tell the customer that they do have it setup correctly, however Funnels need to be done in order and it appears that his players are not always going in order. It also appears that the "ts" number is the same for both 'Level 1's' and the 'Level 3'. I do not know what the "ts" is but that may be an issue.\par
\b Fourth- \b0 I would do \ul\i Issue 6\ulnone\i0  fourth. For this issue I would check to see if possibly the 'All Spenders' are for the lifetime of the app while 'Never Monetized' was set to the past 90 days. Another option I could think of is if the customer had a period of discounted In-App-Purchases that triggered the 'All Spenders' to go up and also 'Never Monetized' because the 'IAP' was free.\par
\b Fifth- \b0 I would do \ul\i Issue 5\ulnone\i0  fifth. To help this user out I would tell them that Unity Analytics is beneficial because it is very simple to integrate and doesnt need any SDK's which can cause a number of build errors if using multiple 3rd party plugins. It is also built by Unity which will allow for Unity to adjust it and tweak it to best suit Unity's customer base.\par
\b Sixth- \b0 I would do \ul\i Issue 2\ulnone\i0  sixth. For this customer I would assure him that the iTunes amount would be the correct amount and that Test purchases may be showing up as additional revenue in the Analytics dashboard. If neither of these are the issue I would tell the customer that if he could send a verison of his build I could take a look at his IAP setup and see for myself what the issue is.\par
\par
My reasoning behind the orders of these are that the first 2 issues are very quick and simple emails back telling them what they need to do. For the 3rd and 4th issues there is more thinking and examining involved to figure it out. I left the last two(Issues 5 and 2) for last because they are rude and disrespectful during their messages. I don't believe that being rude or disrespectful should get you ahead in line, so while I would still be as courteous to them, I would leave them for last especially since both of their issues do not seem to be anything of urgency either. Giving them a little extra time to cool off may lead to a better end result as well.\par
\par
\b\fs32 Ads: \b0\fs22\par
\par
Order of issues/bugs - I would take into account the order they were received, but assuming they were all placed at exactly the same time I would order them as such.\par
\par
\b First\b0 - I would do \ul\i Issue 3\ulnone  \i0 first. Since this issue seems to be from someone who is from a studio, I am going to give a little priority to them as they will likely be one of the customers that drives in revenue for Unity. It is also a simple question to answer. I would tell the customer that we work with both Facebook games as well as mobile games and that it can just be submitted as a Facebook title.\par
\b Second- \b0 I would do \ul\i Issue 2\ulnone\i0  second. For this user I would direct them to the URL "{{\field{\*\fldinst{HYPERLINK https://unity3d.com/services/ads/quick-start-guide }}{\fldrslt{https://unity3d.com/services/ads/quick-start-guide\ul0\cf0}}}}\f0\fs22 " as well as show them the code that is listed on that page. I would also advise them to upload a copy of their script so I can quickly view it and more efficiently resolve their issue.\par
\b Third- \b0 I would do \ul\i Issue 4\ulnone\i0  third. I would simply let this user know that in order to generate revenue a user may either click on the ad, OR watch the video. Im not sure what Unity's policy is but I would let them know that the user must watch the video ad for \ul X\ulnone  amount of seconds before it would trigger that revenue.\par
\b Fourth- \b0 I would do \ul\i Issue 5\ulnone\i0  fourth. For this issue I would tell the user to refer to {{\field{\*\fldinst{HYPERLINK https://unity3d.com/services/ads/quick-start-guide }}{\fldrslt{https://unity3d.com/services/ads/quick-start-guide\ul0\cf0}}}}\f0\fs22  for same code and that if they have further questions to respond back.\par
\b Fifth- \b0 I would do \ul\i Issue 6\ulnone\i0  fifth. For this issue I would ensure that the user has the actual ID listed in the Initialize call. I would then ask the user to Debug  above the if-statement to see if Advertisement.isReady is returning true or false. \par
\b Sixth- \b0 I would do \ul\i Issue 1\ulnone\i0  sixth. For this user I would let them know in a kindly manner that Unity Ads is still a new service and that I would be happy to hear some feedback about his specific issue in hopes to earn him as much revenue via Unity Ads as possible.\par
\par
For the order on these, I did Issue 3 first since I felt it was from the person most likely to gain Unity revenue being that he claimed to be from a studio. The questions were all fairly straight forward and after that were just answered in the order they were listed with the exception of the first issue who was last. I left that one for last for similiar reasons to the Analytics. The customer was rude and did not have an urgent issue so I felt the other customers had priority.\par
\par
\b\fs32 Administration:\b0\fs22\par
Unfortunately the tasks under Administration are ones I am not currently familiar with. I would be more than willing to learn how to use the softwares to get the tasks accomplished though.\par
\par
\b\fs32 Documentation:\par
\b0\fs22 Welcome to Unity Ads!\par
To get started, make sure your 'Platform' is set to iOS. \par
The next step is to Enable Ads from the Services window. To open that, Click Window from the top menu and click Services. If you already have a Unity Project ID setup from the Unity Developer Portal click 'I already have a Unity Project ID', select your Organization and Project and click 'Link'. If you already have an organization but not a project ID, select your Organization and click 'Create'. \par
Once you are logged in, click the 'Ads' text to bring you to the Ads section. Next, click the toggle to turn on Ads and Analytics(required for ads) on your Developer Portal. After clicking the toggle, you will be prompted to answer a question regarding the age range your app is directed at. After clicking your answer it will import the SDK into your project.\par
Select the Platform(s) you will be using and select 'Test mode' for now as well until we are finished with testing.\par
The next steps are for displaying the code to active Ads in your project.\par
\par
In your Ads script, declare 'using UnityEngine.Advertisements;' in the header.\par
To display ads you will need to  add 'Advertisement.Show();' in the function where you want to call them.\par
\par
You can now test out your ads by creating a build and triggering them how you set it up.\par
\par
For more in-depth use of the ads you can also ad the Ad Unit ID in the 'Advertisement.Show()' method call as well as a callback handler to be called when the Ad is finished playing.\par
\par
Example Code:\par
            void ShowAd ()\par
            \{\par
                ShowOptions options = new ShowOptions();\par
                options.resultCallback = AdResultCallback;\par
                Advertisement.Show ("Ad ID" , options);\par
            \}\par
        \u8203?\par
            private void AdResultCallback (ShowResult result)\par
            \{\par
                switch (result)\par
                \{\par
                case ShowResult.Finished:\par
                    Debug.Log ("Video completed. Offer a reward to the player.");\par
                    break;\par
                case ShowResult.Skipped:\par
                    Debug.LogWarning ("Video was skipped.");\par
                    break;\par
                case ShowResult.Failed:\par
                    Debug.LogError ("Video failed to show.");\par
                    break;\par
                \}\par
            \}\par
        \}\b\par
}
 